<!-- Action Buttons -->
    <div class="d-flex justify-content-between align-items-center mb-3 mt-3 no-print">
        <div>
            <form action="/loader/truck/<%= project.code %>/skids/clear" method="POST" style="display:inline;">
                <input type="hidden" name="_method" value="DELETE">
                <input type="hidden" name="loadId" value="<%= load._id %>">
                <button type="submit" id="resetSkidsBtn" class="btn btn-secondary"
                        <%= load.skids.length === 0 ? 'disabled' : '' %>>
                    <i class="fas fa-undo"></i> Reset Truck Skids List
                </button>
            </form>
        </div>
        <a href="/loader/truck/<%= project.code %>/print?loadId=<%= load._id %>" class="btn btn-print" target="_blank">
            <i class="fas fa-print"></i> Print Loading Plan
        </a>
    </div><!-- ==== Skid Details Page ==== -->
<div id="skidDetailsPage" class="page active">
    <h2 class="section-title">
    <i class="fas fa-pallet"></i> Skid Management
    (<%= project.name %>)
    </h2>
    

    <!-- Complete Multi-Project Interface with Dynamic Current Project -->
<div class="multi-project-section mb-3" style="background-color: #f8f9fa; padding: 15px; border-radius: 5px;">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h5 class="mb-0">
                <i class="fas fa-project-diagram"></i> Current Project: 
                <strong id="currentProjectName"><%= displayProject ? displayProject.name : project.name %></strong> 
                (<span id="currentProjectCode"><%= displayProject ? displayProject.code : project.code %></span>)
            </h5>
            <% if (displayProject && displayProject.code !== project.code) { %>
                <small class="text-muted">Main Project: <%= project.name %> (<%= project.code %>)</small>
            <% } %>
        </div>
        <button id="addAnotherProjectBtn" class="btn btn-info">
            <i class="fas fa-plus-circle"></i> Add From Another Project
        </button>
    </div>
</div>

<!-- Project Tabs for Easy Switching -->
<% if (additionalProjects && additionalProjects.length > 0) { %>
    <div class="project-tabs-container mb-3">
        <ul class="nav nav-tabs" role="tablist">
            <li class="nav-item">
                <a class="nav-link <%= (!showProject || showProject === project.code) ? 'active' : '' %>" 
                   href="?loadId=<%= load._id %>&showProject=<%= project.code %>"
                   data-project-code="<%= project.code %>"
                   data-project-name="<%= project.name %>">
                    <i class="fas fa-star"></i> <%= project.name %>
                    <span class="badge badge-primary ml-1">Main</span>
                </a>
            </li>
            <% additionalProjects.forEach(proj => { %>
                <li class="nav-item">
                    <a class="nav-link <%= showProject === proj.code ? 'active' : '' %>" 
                       href="?loadId=<%= load._id %>&showProject=<%= proj.code %>"
                       data-project-code="<%= proj.code %>"
                       data-project-name="<%= proj.name %>">
                        <%= proj.name %>
                        <% if (showProject === proj.code) { %>
                            <span class="badge badge-success ml-1">Current</span>
                        <% } %>
                    </a>
                </li>
            <% }); %>
        </ul>
    </div>
<% } %>

<!-- Additional Projects List (Initially Hidden) -->
<div id="additionalProjectsSection" style="display: none; margin-bottom: 20px;">
    <div class="card shadow">
        <div class="card-header bg-info text-white">
            <h5 class="mb-0">
                <i class="fas fa-folder-plus"></i> Select Additional Project
            </h5>
        </div>
        <div class="card-body">
            <form action="/loader/truck/<%= project.code %>/add-project" method="POST">
                <input type="hidden" name="loadId" value="<%= load._id %>">
                <input type="hidden" name="currentProjectCode" value="<%= project.code %>">
                
                <div class="form-group">
                    <label for="additionalProject">Select Project:</label>
                    <select name="additionalProjectCode" id="additionalProject" class="form-control" required>
                        <option value="">-- Select a Project --</option>
                        <!-- Populated via AJAX -->
                    </select>
                </div>
                
                <div class="d-flex justify-content-end gap-2">
                    <button type="button" class="btn btn-secondary mr-2" id="cancelAddProject">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-check"></i> Load Project Inventory
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const addProjectBtn = document.getElementById('addAnotherProjectBtn');
    const projectSection = document.getElementById('additionalProjectsSection');
    const cancelBtn = document.getElementById('cancelAddProject');
    const projectSelect = document.getElementById('additionalProject');
    
    // Update current project display when hovering over tabs
    const projectTabs = document.querySelectorAll('.nav-tabs .nav-link[data-project-code]');
    projectTabs.forEach(tab => {
        tab.addEventListener('mouseenter', function() {
            if (!this.classList.contains('active')) {
                this.style.backgroundColor = '#f0f0f0';
            }
        });
        
        tab.addEventListener('mouseleave', function() {
            if (!this.classList.contains('active')) {
                this.style.backgroundColor = '';
            }
        });
    });
    
    // Show project selection
    addProjectBtn.addEventListener('click', function() {
        projectSection.style.display = 'block';
        loadAvailableProjects();
        // Smooth scroll to the form
        projectSection.scrollIntoView({ behavior: 'smooth' });
    });
    
    // Cancel project selection
    cancelBtn.addEventListener('click', function() {
        projectSection.style.display = 'none';
        projectSelect.innerHTML = '<option value="">-- Select a Project --</option>';
    });
    
    // Load available projects via AJAX
    function loadAvailableProjects() {
        const currentProjectCode = '<%= project.code %>';
        const loadedProjects = [currentProjectCode];
        
        <% if (additionalProjects && additionalProjects.length > 0) { %>
            <% additionalProjects.forEach(proj => { %>
                loadedProjects.push('<%= proj.code %>');
            <% }); %>
        <% } %>
        
        fetch('/loader/api/available-projects')
            .then(response => response.json())
            .then(data => {
                projectSelect.innerHTML = '<option value="">-- Select a Project --</option>';
                let availableCount = 0;
                
                data.projects.forEach(proj => {
                    if (!loadedProjects.includes(proj.code)) {
                        const option = document.createElement('option');
                        option.value = proj.code;
                        option.textContent = `${proj.name} (${proj.code})`;
                        projectSelect.appendChild(option);
                        availableCount++;
                    }
                });
                
                if (availableCount === 0) {
                    projectSelect.innerHTML = '<option value="">No additional projects available</option>';
                    projectSelect.disabled = true;
                    document.querySelector('button[type="submit"]').disabled = true;
                } else {
                    projectSelect.disabled = false;
                    document.querySelector('button[type="submit"]').disabled = false;
                }
            })
            .catch(error => {
                console.error('Error loading projects:', error);
                alert('Error loading projects. Please try again.');
            });
    }
});
</script>

<style>
.multi-project-section {
    border: 1px solid #dee2e6;
    margin-bottom: 20px;
    animation: fadeIn 0.3s ease-in;
}

.multi-project-section small {
    display: block;
    margin-top: 5px;
}

.project-tabs-container {
    border-bottom: 2px solid #dee2e6;
}

.nav-tabs {
    border-bottom: none;
}

.nav-tabs .nav-link {
    color: #495057;
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    border-bottom: none;
    margin-right: 5px;
    padding: 10px 20px;
    transition: all 0.3s ease;
}

.nav-tabs .nav-link:hover {
    background-color: #e9ecef;
}

.nav-tabs .nav-link.active {
    color: #495057;
    background-color: #fff;
    border-color: #dee2e6;
    border-bottom: 2px solid #fff;
    font-weight: bold;
    position: relative;
    z-index: 10;
}

.nav-tabs .nav-link .badge {
    font-size: 0.7em;
    vertical-align: top;
}

#additionalProjectsSection .card {
    border: none;
    transition: all 0.3s ease;
}

#additionalProjectsSection .card-header {
    background-color: #17a2b8;
    border: none;
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}
</style>

    <!-- Inventory Skid Selection -->
    <% if (inventorySkids && inventorySkids.length > 0) { %>
        <!-- Improved Inventory Skid Selection Table with better visual indicators -->
        <div id="inventorySkidSelectionContainer">
            <h4><i class="fas fa-clipboard-check"></i> Select Inventory Skids to Add to Truck</h4>
            
            <div class="alert alert-info" role="alert">
                <i class="fas fa-info-circle"></i> Once a skid is added to the truck, it cannot be selected again. 
                Skids that are already on the truck are marked as "Already Added" below.
            </div>
            
            <!-- Hidden fields for loadId and projectId -->
            <input type="hidden" id="loadId" value="<%= load._id %>">
            <input type="hidden" id="projectId" value="<%= project.code %>">

            <!-- Inventory Skid Selection Form -->
            <form action="/loader/truck/<%= project.code %>/skids/add-from-inventory" method="POST" id="inventorySkidForm">
            <input type="hidden" name="loadId" value="<%= load._id %>">
            <!-- CRITICAL FIX: Ensure sourceProject is dynamically set -->
            <input type="hidden" name="sourceProject" id="sourceProjectInput" value="<%= showProject || displayProject?.code || project.code %>">

            <div class="table-responsive">
                <table id="inventorySkidSelectionTable" class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th width="5%">Add</th>
                            <th width="15%">Inv. ID</th>
                            <th width="10%">Width (ft)</th>
                            <th width="10%">Length (ft)</th>
                            <th width="10%">Weight (lbs)</th>
                            <th width="50%">Description</th>
                        </tr>
                    </thead>
                    <tbody id="inventorySkidSelectionBody">
                    <% if (inventorySkids && inventorySkids.length > 0) { %>
                        <% inventorySkids.forEach(skid => { %>
                            <tr class="<%= skid.alreadyOnTruck ? 'already-on-truck' : '' %>" data-skid-id="<%= skid.id %>">
                                <td>
                                    <input type="checkbox"
                                            name="selectedSkids"
                                            value="<%= skid.id %>"
                                            id="inv-select-<%= skid.id %>"
                                            class="inventory-skid-checkbox"
                                            <%= skid.alreadyOnTruck ? 'disabled checked' : '' %>>
                                </td>
                                <td>
                                    <label for="inv-select-<%= skid.id %>"
                                            class="<%= skid.alreadyOnTruck ? 'disabled-label' : '' %>"
                                            title="<%= skid.alreadyOnTruck ? 'Already added to truck' : `Select ${skid.id}` %>">
                                        <%= skid.id %>
                                    </label>
                                </td>
                                <td><%= skid.width.toFixed(2) %></td>
                                <td><%= skid.length.toFixed(2) %></td>
                                <td><%= skid.weight.toFixed(2) %></td>
                                <td>
                                    <%= skid.description || '-' %>
                                    <% if (skid.alreadyOnTruck) { %>
                                        <span class="already-added-note">(Already on truck)</span>
                                    <% } %>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="6" style="text-align: center;">No inventory skids available.</td>
                        </tr>
                    <% } %>
                    </tbody>
                </table>
            </div>

            <button type="submit" class="btn btn-primary mt-3" id="addSelectedSkidsBtn">
                <i class="fas fa-plus"></i> Add Selected Skids to Truck
            </button>
            </form>
        </div>
    <% } %>

    <!-- Ensure we have an explicit form container for adding skids directly -->
    <div class="mt-3 mb-4">
        <button class="btn btn-success" id="addTruckSkidBtn">
            <i class="fas fa-plus"></i> Add Skid Directly to Truck
        </button>
        
        <!-- Container for the form that will be added dynamically -->
        <div id="addTruckSkidFormContainer" style="display: none; margin-top: 15px; padding: 15px; border: 1px solid #ddd; border-radius: 5px; background-color: #f9f9f9;"></div>
    </div>

<!-- Updated Truck Skid Table with Source Project -->
<h3 class="section-title" style="font-size: 1.2rem; margin-top: 30px; border-bottom: none;">
    <i class="fas fa-truck-loading"></i> Skids Assigned to this Truck Load
</h3>
<div class="table-responsive">
    <table id="truckSkidTable">
        <thead>
        <tr>
            <th>Truck Skid #</th>
            <th>Width (ft)</th>
            <th>Length (ft)</th>
            <th>Weight (lbs)</th>
            <th>Description</th>
            <th>Source Project</th>
            <th class="no-print">Actions</th>
        </tr>
        </thead>
        <tbody id="truckSkidTableBody">
        <% if (load.skids && load.skids.length > 0) { %>
            <% load.skids.forEach((skid, index) => { %>
                <tr data-skid-id="<%= skid.id %>" data-index="<%= index %>">
                    <td><%= index + 1 %></td>
                    <td><%= skid.width.toFixed(2) %></td>
                    <td><%= skid.length.toFixed(2) %></td>
                    <td class="skid-weight-cell"><%= skid.weight.toFixed(2) %></td>
                    <td>
                        <%= skid.description || '-' %>
                        <% if (skid.originalInvId) { %>
                            <span style="font-size: 0.8em; color: #666; display: block;">
                                Inv ID: <%= skid.originalInvId %>
                            </span>
                        <% } %>
                    </td>
                    <td>
                        <% 
                            let sourceProjectName = '';
                            
                            // Check if the skid has an explicit source project
                            if (skid.sourceProject && projectMap && projectMap[skid.sourceProject]) {
                                sourceProjectName = projectMap[skid.sourceProject];
                            } else if (skid.originalInvId) {
                                // Extract project code from inventory ID format: INV-PROJECTCODE-XXX
                                const parts = skid.originalInvId.split('-');
                                if (parts.length >= 3 && parts[0] === 'INV') {
                                    const projCode = parts[1];
                                    if (projectMap && projectMap[projCode]) {
                                        sourceProjectName = projectMap[projCode];
                                    }
                                }
                            }
                            
                            // If still no source project found, it's a direct entry - use the main project
                            if (!sourceProjectName) {
                                sourceProjectName = project.name;
                            }
                        %>
                        <%= sourceProjectName %>
                    </td>
                    <td class="action-buttons no-print">
                        <button class="btn-edit btn-sm edit-skid-btn" data-skid-id="<%= skid.id %>" data-index="<%= index %>">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <form action="/loader/truck/<%= project.code %>/skids/delete-skid" method="POST" class="delete-skid-form">
                            <input type="hidden" name="_method" value="DELETE">
                            <input type="hidden" name="skidId" value="<%= skid.id %>">
                            <input type="hidden" name="loadId" value="<%= load._id %>">
                            <button type="submit" class="btn-delete btn-sm delete-skid-btn">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </form>
                    </td>
                </tr>
            <% }); %>
        <% } else { %>
            <tr>
                <td colspan="7" style="text-align: center;">No skids added to this truck yet.</td>
            </tr>
        <% } %>
        </tbody>
        <tfoot>
        <tr style="font-weight: bold; background-color: #f8f9fa;">
            <td colspan="3">Truck Totals: <span id="totalTruckSkidCount"><%= load.skids.length || 0 %></span> Skids</td>
            <td id="totalTruckSkidWeight"><%= load.totalWeight?.toFixed(2) || '0.00' %> lbs</td>
            <td colspan="3">
                <% if (load.skids && load.skids.length > 0) { %>
                    <% 
                        const projectCounts = {};
                        load.skids.forEach(skid => {
                            let projName = '';
                            
                            // For direct entries without sourceProject, use the current project
                            if (!skid.sourceProject && !skid.originalInvId) {
                                projName = project.name;
                            } else if (skid.sourceProject) {
                                // Has explicit source project
                                if (projectMap && projectMap[skid.sourceProject]) {
                                    projName = projectMap[skid.sourceProject];
                                } else {
                                    projName = skid.sourceProject;
                                }
                            } else if (skid.originalInvId) {
                                // Extract from inventory ID
                                const parts = skid.originalInvId.split('-');
                                if (parts.length >= 3 && parts[0] === 'INV') {
                                    const projCode = parts[1];
                                    if (projectMap && projectMap[projCode]) {
                                        projName = projectMap[projCode];
                                    } else {
                                        projName = projCode;
                                    }
                                }
                            }
                            
                            // Default to the current project name
                            if (!projName) {
                                projName = project.name;
                            }
                            
                            projectCounts[projName] = (projectCounts[projName] || 0) + 1;
                        });
                        const projectList = Object.entries(projectCounts).map(([proj, count]) => `${proj}: ${count}`).join(', ');
                    %>
                    <small style="color: #333;">From: <%= projectList %></small>
                <% } %>
            </td>
        </tr>
        </tfoot>
    </table>
</div>

<style>
/* Clean styles without badges */
#truckSkidTable {
    border-collapse: collapse;
    background-color: white;
}

#truckSkidTable th {
    background-color: #f8f9fa;
    font-weight: bold;
    text-align: center;
    padding: 12px;
    color: #333;
    border-bottom: 2px solid #dee2e6;
}

#truckSkidTable td {
    padding: 10px;
    vertical-align: middle;
    color: #333;
    border-bottom: 1px solid #e9ecef;
}

#truckSkidTable tr:hover td {
    background-color: #f5f7fa;
}

/* Action buttons */
.btn-edit {
    background-color: #17a2b8;
    color: white;
    border: none;
    padding: 4px 12px;
    border-radius: 4px;
    cursor: pointer;
}

.btn-edit:hover {
    background-color: #138496;
}

.btn-delete {
    background-color: #dc3545;
    color: white;
    border: none;
    padding: 4px 12px;
    border-radius: 4px;
    cursor: pointer;
}

.btn-delete:hover {
    background-color: #c82333;
}

.action-buttons form {
    display: inline-block;
    margin-left: 5px;
}
</style>

<!-- Enhanced Truck Skid Table with Proper Source Project Display -->


<style>
/* Enhanced styles for the source badges */
#truckSkidTable {
    border-collapse: collapse;
}

#truckSkidTable th {
    background-color: #f8f9fa;
    font-weight: bold;
    text-align: center;
    padding: 12px;
}

#truckSkidTable td {
    padding: 10px;
    vertical-align: middle;
}

.badge {
    font-size: 0.9em;
    padding: 0.4em 0.7em;
    font-weight: 500;
    letter-spacing: 0.5px;
}

.badge-primary {
    background-color: #007bff;
    color: white;
}

.badge-info {
    background-color: #17a2b8;
    color: white;
}

.badge-light {
    background-color: #f8f9fa;
    color: #495057;
    border: 1px solid #dee2e6;
}
</style>

<!-- Fixed Loading Summary for Skids Only -->
<!-- Fixed Loading Summary for Skids Only -->
<div class="loading-instructions no-print">
    <div id="loadingInstructions">
        <h5><i class="fas fa-info-circle"></i> Skid Selection Summary</h5>
        <p><strong>Current Selection:</strong></p>
        <ul>
            <li>Total Skids Selected: <strong><%= load.skids.length || 0 %></strong></li>
            <li>Total Weight: <strong><%= ((load.totalWeight || spaceUtilization.totalWeight || 0)).toFixed(2) %></strong> lbs</li>
            <li>Total Area: <strong><%= spaceUtilization.totalArea.toFixed(2) %></strong> sq ft</li>
            <li>Skids by Project:
                <% if (load.skids && load.skids.length > 0) { %>
                    <% 
                        const summaryProjectCounts = {};
                        let calculatedTotalWeight = 0;
                        
                        load.skids.forEach(skid => {
                            let projName = '';
                            
                            // Calculate weight while iterating
                            const skidWeight = parseFloat(skid.weight) || 0;
                            calculatedTotalWeight += skidWeight;
                            
                            // Extract project code
                            if (skid.sourceProject) {
                                if (projectMap && projectMap[skid.sourceProject]) {
                                    projName = projectMap[skid.sourceProject];
                                } else {
                                    projName = skid.sourceProject;
                                }
                            } else if (skid.originalInvId) {
                                const parts = skid.originalInvId.split('-');
                                if (parts.length >= 3 && parts[0] === 'INV') {
                                    const projCode = parts[1];
                                    if (projectMap && projectMap[projCode]) {
                                        projName = projectMap[projCode];
                                    } else {
                                        projName = projCode;
                                    }
                                }
                            }
                            
                            // Use main project name for direct entries
                            if (!projName) {
                                projName = project.name;
                            }
                            
                            summaryProjectCounts[projName] = (summaryProjectCounts[projName] || 0) + 1;
                        });
                        
                        // If total weight is still 0, use calculated weight
                        if ((load.totalWeight || 0) === 0 && calculatedTotalWeight > 0) {
                            load.totalWeight = calculatedTotalWeight;
                        }
                    %>
                    <ul>
                    <% Object.entries(summaryProjectCounts).forEach(([projName, count]) => { %>
                        <li><strong><%= projName %></strong>: <%= count %> skid<%= count !== 1 ? 's' : '' %></li>
                    <% }); %>
                    </ul>
                <% } else { %>
                    <p style="margin-left: 20px; color: #666;">No skids selected yet</p>
                <% } %>
            </li>
        </ul>
        
        <div class="alert alert-info mt-3">
            <i class="fas fa-info-circle"></i> <strong>Next Step:</strong> After selecting all required skids, click "Next: Truck Information Entry" to specify the truck details and capacity.
        </div>
    </div>
</div>

    <!-- Navigation Buttons -->
    <div class="button-group no-print" style="margin-top: 30px;">
        <!-- Back all the way to Task Selection -->
        <a href="/loader" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Back to Task Selection
        </a>

        <!-- Next → Truck Information Entry -->
        <a
          href="/loader/truck/<%= project.code %>/info?loadId=<%= load._id %>"
          class="btn btn-success btn-next"
        >
            <i class="fas fa-truck"></i> Next: Truck Information Entry
        </a>
    </div>
</div>

<!-- Skid Form Template -->
<template id="skidFormTemplate">
    <h4 class="skid-form-title-dynamic no-print">Add New Skid</h4>
    <form class="add-skid-form" novalidate>
        <input type="hidden" class="edit-skid-index">
        <input type="hidden" name="loadId" value="<%= load._id %>">
        <div class="row">
            <div class="col-md-3">
                <div class="form-group">
                    <label class="form-label required">Width <span class="unit-label">(ft)</span></label>
                    <div class="input-group">
                        <input type="number" name="width" class="form-control skid-width" min="0.1" max="40" step="0.01" required placeholder="e.g., 4">
                        <span class="input-group-text">ft</span>
                    </div>
                    <div class="invalid-feedback">Please enter a valid width (0.1-40).</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="form-label required">Length <span class="unit-label">(ft)</span></label>
                    <div class="input-group">
                        <input type="number" name="length" class="form-control skid-length" min="0.1" max="40" step="0.01" required placeholder="e.g., 4">
                        <span class="input-group-text">ft</span>
                    </div>
                    <div class="invalid-feedback">Please enter a valid length (0.1-40).</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="form-label required">Weight <span class="unit-label">(lbs)</span></label>
                    <div class="input-group">
                        <input type="number" name="weight" class="form-control skid-weight" min="1" required placeholder="e.g., 500">
                        <span class="input-group-text">lbs</span>
                    </div>
                    <div class="invalid-feedback">Please enter a valid weight (min 1).</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="form-label">Description</label>
                    <textarea name="description" class="form-control skid-description" placeholder="Type description here..." rows="3"></textarea>
                </div>
            </div>
        </div>
        <div class="button-group">
            <button type="button" class="btn btn-secondary cancel-skid-btn">
                <i class="fas fa-times"></i> Cancel
            </button>
            <button type="submit" class="btn btn-primary save-skid-btn">
                <i class="fas fa-plus"></i> Add Skid
            </button>
        </div>
    </form>
</template>

<%- contentFor('styles') %>
<style>
      tr.already-on-truck {
    background-color: #f8f9fa !important;
    color: #6c757d;
  }
  
  tr.already-on-truck td {
    text-decoration: line-through;
    opacity: 0.7;
  }
  
  .already-on-truck-label {
    color: #dc3545;
    font-style: italic;
    font-size: 0.85em;
    margin-left: 5px;
  }
  
  /* Make disabled checkboxes more obvious */
  input[type="checkbox"]:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  tr.already-on-truck label {
    cursor: not-allowed;
  }
    .input-group {
        display: flex;
        align-items: stretch;
    }

    .input-group .form-control {
        flex: 1;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    .input-group-text {
        display: flex;
        align-items: center;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: var(--dark-gray);
        text-align: center;
        white-space: nowrap;
        background-color: var(--medium-gray);
        border: 1px solid #ced4da;
        border-left: 0;
        border-radius: 0 var(--border-radius) var(--border-radius) 0;
    }

    /* Mobile adjustments */
    @media (max-width: 768px) {
        .row {
            flex-direction: column;
        }

        .col-md-3 {
            width: 100%;
        }
    }
    
    /* Readonly field styling */
    input[readonly] {
        background-color: #f8f9fa;
        cursor: default;
    }
    
    /* Style for already selected skids */
    tr.already-selected, tr.selected-skid {
        background-color: #f0f0f0;
        color: #777;
    }

    tr.already-selected td, tr.selected-skid td {
        text-decoration: line-through;
    }

    tr.already-selected::after, tr.selected-skid::after {
        content: "(Already Added)";
        position: absolute;
        right: 20px;
        color: #666;
        font-style: italic;
    }
    /* Add these to your styles section */
tr.already-selected td {
    opacity: 0.6;
    color: #777;
    text-decoration: line-through;
}

tr.already-selected input[type="checkbox"] {
    pointer-events: none;
}

.already-added-note {
    font-style: italic;
    color: #d9534f;
    font-size: 0.8em;
    margin-left: 5px;
}

/* Add a disabled appearance to checkboxes */
input[type="checkbox"]:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}
    /* Styles for skids already on the truck */
    tr.already-on-truck {
        background-color: #f8f9fa !important;
        color: #6c757d;
    }
    
    tr.already-on-truck td {
        text-decoration: line-through;
        opacity: 0.7;
    }
    
    .already-added-note {
        color: #dc3545;
        font-style: italic;
        font-size: 0.85em;
        margin-left: 5px;
    }
    
    /* Highlight skids selected for adding to the truck */
    tr.selected-for-add {
        background-color: #e8f4ff !important;
        font-weight: bold;
    }
    
    /* Make disabled checkboxes more obvious */
    input[type="checkbox"]:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    
    .disabled-label {
        color: #6c757d;
        cursor: not-allowed;
    }
    
    /* Add hover effect for rows */
    tr:hover {
        background-color: #f1f1f1;
    }
    
    /* Add focus effect for checkboxes */
    input[type="checkbox"]:focus {
        outline: 2px solid #007bff;
        outline-offset: 2px;
    }
    
    /* Style for table headers */
    th {
        background-color: #f8f9fa;
        font-weight: bold;
        text-align: center;
    }
    
    /* Style for table rows */
    tr {
        transition: background-color 0.2s ease-in-out;
    }
    
    /* Style for action buttons */
    .btn {
        transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
    }
    
    .btn:hover {
        background-color: #0056b3;
        color: #ffffff;
    }
.multi-project-section {
    border: 1px solid #dee2e6;
    margin-bottom: 20px;
}

.multi-project-section small {
    display: block;
    margin-top: 5px;
}

#additionalProjectsSection .card {
    border: 2px solid #17a2b8;
}

#additionalProjectsSection .card-header {
    background-color: #17a2b8;
    color: white;
}
</style>

<%- contentFor('scripts') %>
<%- contentFor('scripts') %>
<script>
    // Initialize event listeners when document is ready
    document.addEventListener('DOMContentLoaded', function() {
        console.log("DOM Content Loaded");
        
        // Add event listeners for add skid button
        const addTruckSkidBtn = document.getElementById('addTruckSkidBtn');
        if (addTruckSkidBtn) {
            addTruckSkidBtn.addEventListener('click', function(e) {
                e.preventDefault(); // Prevent any default action
                console.log("Add skid button clicked");
                toggleAddSkidForm();
            });
            console.log("Add skid button listener attached");
        } else {
            console.error("Add skid button not found!");
        }

        // Set up event listeners for edit buttons
        document.querySelectorAll('.edit-skid-btn').forEach(button => {
            button.addEventListener('click', function() {
                console.log("Edit button clicked");
                const skidId = this.getAttribute('data-skid-id');
                const index = parseInt(this.getAttribute('data-index'), 10);
                editSkid(skidId, index);
            });
        });
        
        // Set up event listeners for delete form confirmation
        document.querySelectorAll('.delete-skid-form').forEach(form => {
            form.addEventListener('submit', function(e) {
                if (!confirm('Are you sure you want to remove this skid from the truck?')) {
                    e.preventDefault();
                }
            });
        });

        // Set up confirmation for the Reset Truck Skids List button
        document.getElementById('resetSkidsBtn')?.addEventListener('click', function(e) {
            if (!confirm('Are you sure you want to clear all skids from this truck load?')) {
                e.preventDefault();
            }
        });

        // Set up form validation for all forms
        document.addEventListener('submit', function(e) {
            if (e.target.classList.contains('add-skid-form')) {
                const form = e.target;
                if (!form.checkValidity()) {
                    e.preventDefault();
                    e.stopPropagation();

                    // Show validation messages
                    const inputs = form.querySelectorAll('[required]');
                    inputs.forEach(input => {
                        if (!input.validity.valid) {
                            input.classList.add('is-invalid');
                        } else {
                            input.classList.remove('is-invalid');
                        }
                    });

                    // Focus first invalid input
                    const firstInvalid = form.querySelector('.is-invalid');
                    if (firstInvalid) {
                        firstInvalid.focus();
                    }
                }
            }
        });
        
        // Track selected inventory skids and prevent duplicates
        const inventoryCheckboxes = document.querySelectorAll('.inventory-skid-checkbox');
        
        // Add event listeners to each checkbox
        inventoryCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                // If checked, disable this skid from being selected again
                if (this.checked) {
                    // Make the row appear as selected
                    this.closest('tr').classList.add('selected-skid');
                } else {
                    // Remove the selected appearance
                    this.closest('tr').classList.remove('selected-skid');
                }
            });
        });
        
        // FIX: Handle Add Selected Skids to Truck button click
        const addSelectedSkidsBtn = document.getElementById('addSelectedSkidsBtn');
        if (addSelectedSkidsBtn) {
            addSelectedSkidsBtn.addEventListener('click', function(e) {
                e.preventDefault();
                submitInventorySkids();
            });
        }
        
        // Calculate initial total weight - fixed version that uses visible table data
        updateTotalWeightFromTable();
        
        // IMPORTANT: Mark skids that are already on the truck as disabled
        disableInventorySkidsAlreadyOnTruck();
    });
    
    // Function to check and disable inventory items already on the truck
    function disableInventorySkidsAlreadyOnTruck() {
        console.log("Checking for inventory skids already on truck...");
        
        // Step 1: Get all inventory IDs from the truck table
        const skidsOnTruck = [];
        
        // Find all rows in the truck skids table
        const truckSkidRows = document.querySelectorAll('#truckSkidTableBody tr');
        
        // Extract information from each row
        truckSkidRows.forEach(row => {
            // Try to find the inventory ID in the description column (5th column)
            const descriptionCell = row.querySelector('td:nth-child(5)');
            if (descriptionCell) {
                // Look for text like "(from Inv: INV-XXXXX-X)" in the description
                const text = descriptionCell.innerHTML || '';
                const invMatch = text.match(/\(from Inv: ([^)]+)\)/);
                
                if (invMatch && invMatch[1]) {
                    // Found an inventory ID reference
                    skidsOnTruck.push(invMatch[1].trim());
                }
            }
            
            // Also check if there's any data attributes that might contain the original inventory ID
            const invIdAttr = row.getAttribute('data-original-inv-id');
            if (invIdAttr) {
                skidsOnTruck.push(invIdAttr);
            }
        });
        
        console.log("Skids already on truck:", skidsOnTruck);
        
        if (skidsOnTruck.length === 0) {
            console.log("No skids found on truck. No checkboxes to disable.");
            return;
        }
        
        // Step 2: Disable checkboxes for inventory items that are already on the truck
        let disabledCount = 0;
        const inventoryCheckboxes = document.querySelectorAll('.inventory-skid-checkbox');
        
        inventoryCheckboxes.forEach(checkbox => {
            const value = checkbox.value;
            if (skidsOnTruck.includes(value)) {
                // Disable the checkbox
                checkbox.disabled = true;
                checkbox.checked = false;
                disabledCount++;
                
                // Add visual indication to the row
                const row = checkbox.closest('tr');
                if (row) {
                    row.classList.add('already-on-truck');
                    
                    // Add "(Already on truck)" to the description if not already there
                    const descCell = row.querySelector('td:nth-child(6)');
                    if (descCell && !descCell.innerHTML.includes('Already on truck')) {
                        descCell.innerHTML += ' <span class="already-added-note">(Already on truck)</span>';
                    }
                    
                    // Update the label to show it's disabled
                    const label = row.querySelector('label');
                    if (label) {
                        label.title = "Already added to truck";
                        label.classList.add('disabled-label');
                    }
                }
            }
        });
        
        console.log(`Disabled ${disabledCount} checkboxes for skids already on truck.`);
        
        // Step 3: Check if the Add Selected button should be disabled (if all checkboxes are disabled)
        const addSelectedBtn = document.getElementById('addSelectedSkidsBtn');
        if (addSelectedBtn && disabledCount === inventoryCheckboxes.length) {
            addSelectedBtn.disabled = true;
            addSelectedBtn.title = "All inventory skids are already on the truck";
        }
    }

    // Function to mark skids already on the truck (alternative implementation)
    function markAlreadyAddedSkids() {
        disableInventorySkidsAlreadyOnTruck();
    }

    // FIX: Function to handle form submission using traditional POST
    function submitInventorySkids() {
        // Get form and form data
        const form = document.getElementById('inventorySkidForm');
        
        // Check if any skids are selected
        const selectedCheckboxes = form.querySelectorAll('input[name="selectedSkids"]:checked:not(:disabled)');
        if (selectedCheckboxes.length === 0) {
            alert('Please select at least one skid to add.');
            return;
        }
        
        console.log(`Submitting ${selectedCheckboxes.length} selected skids`);
        
        // Before submitting, disable the checked checkboxes to prevent multiple clicks
        selectedCheckboxes.forEach(checkbox => {
            checkbox.disabled = true;
            
            // Add visual indication to the row
            const row = checkbox.closest('tr');
            if (row) {
                row.classList.add('selected-for-add');
            }
        });
        
        // Submit the form directly (no AJAX)
        form.submit();
    }

    function toggleAddSkidForm() {
        console.log("Toggle add skid form called");
        const formContainer = document.getElementById('addTruckSkidFormContainer');

        if (!formContainer) {
            console.error("Form container not found!");
            return;
        }

        if (formContainer.style.display === 'none' || formContainer.style.display === '') {
            // Show form
            const template = document.getElementById('skidFormTemplate');
            if (!template) {
                console.error("Skid form template not found!");
                alert("Error: Form template not found. Please refresh the page.");
                return;
            }

            const content = template.content.cloneNode(true);
            formContainer.innerHTML = '';
            formContainer.appendChild(content);

            // Set up form submission
            const form = formContainer.querySelector('.add-skid-form');
            if (!form) {
                console.error("Form not found in cloned content!");
                return;
            }

            form.action = '/loader/truck/<%= project.code %>/skid';
            form.method = 'POST';

            // Add hidden input for loadId if not already present
            let loadIdInput = form.querySelector('input[name="loadId"]');
            if (!loadIdInput) {
                loadIdInput = document.createElement('input');
                loadIdInput.type = 'hidden';
                loadIdInput.name = 'loadId';
                loadIdInput.value = '<%= load._id %>';
                form.appendChild(loadIdInput);
            }

            // Set up cancel button event listener
            const cancelBtn = form.querySelector('.cancel-skid-btn');
            if (cancelBtn) {
                cancelBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    formContainer.style.display = 'none';
                    formContainer.innerHTML = '';
                });
            }

            // Show the form first
            formContainer.style.display = 'block';

            // Then try to focus after a delay to ensure DOM is ready
            setTimeout(() => {
                // Try multiple selectors to find the width input
                const widthInput = formContainer.querySelector('.skid-width') ||
                    formContainer.querySelector('input[name="width"]') ||
                    formContainer.querySelector('input[type="number"][name="width"]');

                if (widthInput) {
                    console.log("Width input found, focusing...");
                    widthInput.focus();
                } else {
                    console.warn("Width input not found for focus");
                    // Try to focus on any input in the form
                    const anyInput = formContainer.querySelector('input[type="number"], input[type="text"]');
                    if (anyInput) {
                        anyInput.focus();
                    }
                }
            }, 100);
        } else {
            // Hide form
            formContainer.style.display = 'none';
            formContainer.innerHTML = '';
        }
    }

    // Complete event listener setup
    document.addEventListener('DOMContentLoaded', function () {
        console.log("DOM Content Loaded - Setting up event listeners");

        // Remove any duplicate event listeners by using a named function
        const handleAddSkidClick = function (e) {
            e.preventDefault();
            console.log("Add skid button clicked");
            toggleAddSkidForm();
        };

        // Add event listener for add skid button
        const addTruckSkidBtn = document.getElementById('addTruckSkidBtn');
        if (addTruckSkidBtn) {
            // Remove any existing listeners first
            addTruckSkidBtn.removeEventListener('click', handleAddSkidClick);
            // Add new listener
            addTruckSkidBtn.addEventListener('click', handleAddSkidClick);
            console.log("Add skid button listener attached");
        } else {
            console.error("Add skid button not found!");
        }

        // Set up event listeners for edit buttons
        document.querySelectorAll('.edit-skid-btn').forEach(button => {
            button.addEventListener('click', function () {
                console.log("Edit button clicked");
                const skidId = this.getAttribute('data-skid-id');
                const index = parseInt(this.getAttribute('data-index'), 10);
                editSkid(skidId, index);
            });
        });

        // Set up event listeners for delete form confirmation
        document.querySelectorAll('.delete-skid-form').forEach(form => {
            form.addEventListener('submit', function (e) {
                if (!confirm('Are you sure you want to remove this skid from the truck?')) {
                    e.preventDefault();
                }
            });
        });

        // Set up confirmation for the Reset Truck Skids List button
        const resetBtn = document.getElementById('resetSkidsBtn');
        if (resetBtn) {
            resetBtn.addEventListener('click', function (e) {
                if (!confirm('Are you sure you want to clear all skids from this truck load?')) {
                    e.preventDefault();
                }
            });
        }

        // Clean up any orphaned event listeners from previous attempts
        const allButtons = document.querySelectorAll('#addTruckSkidBtn');
        console.log(`Found ${allButtons.length} add skid button(s)`);
    });

    // Simplify the editSkid function to avoid similar errors
    function editSkid(skidId, index) {
        console.log(`Editing skid ${skidId} at index ${index}`);
        const formContainer = document.getElementById('addTruckSkidFormContainer');

        if (!formContainer) {
            console.error("Form container not found!");
            return;
        }

        const template = document.getElementById('skidFormTemplate');
        if (!template) {
            console.error("Skid form template not found!");
            return;
        }

        const content = template.content.cloneNode(true);
        formContainer.innerHTML = '';
        formContainer.appendChild(content);

        // Update title and button text
        const titleEl = formContainer.querySelector('.skid-form-title-dynamic');
        if (titleEl) {
            titleEl.innerHTML = '<i class="fas fa-edit"></i> Edit Skid #' + (index + 1);
        }

        const saveBtn = formContainer.querySelector('.save-skid-btn');
        if (saveBtn) {
            saveBtn.innerHTML = '<i class="fas fa-save"></i> Save Changes';
        }

        // Find the row in the table with this skid's data
        const skidRow = document.querySelector(`tr[data-skid-id="${skidId}"]`);
        if (skidRow) {
            const cells = skidRow.querySelectorAll('td');
            const width = parseFloat(cells[1].textContent);
            const length = parseFloat(cells[2].textContent);
            const weight = parseFloat(cells[3].textContent);
            const description = cells[4].textContent.trim();

            const form = formContainer.querySelector('.add-skid-form');
            if (!form) {
                console.error("Form not found in template!");
                return;
            }

            // Set form attributes
            form.action = '/loader/truck/<%= project.code %>/skid/' + skidId;
            form.method = 'POST';

            // Add method override for PUT
            const methodInput = document.createElement('input');
            methodInput.type = 'hidden';
            methodInput.name = '_method';
            methodInput.value = 'PUT';
            form.appendChild(methodInput);

            // Add hidden input for loadId
            const loadIdInput = document.createElement('input');
            loadIdInput.type = 'hidden';
            loadIdInput.name = 'loadId';
            loadIdInput.value = '<%= load._id %>';
            form.appendChild(loadIdInput);

            // Show the form first
            formContainer.style.display = 'block';

            // Then fill form with skid data after DOM is ready
            setTimeout(() => {
                const widthInput = formContainer.querySelector('.skid-width') || formContainer.querySelector('input[name="width"]');
                const lengthInput = formContainer.querySelector('.skid-length') || formContainer.querySelector('input[name="length"]');
                const weightInput = formContainer.querySelector('.skid-weight') || formContainer.querySelector('input[name="weight"]');
                const descriptionInput = formContainer.querySelector('.skid-description') || formContainer.querySelector('textarea[name="description"]');

                if (widthInput) widthInput.value = width;
                if (lengthInput) lengthInput.value = length;
                if (weightInput) weightInput.value = weight;

                // Clean up description
                let cleanDescription = description;
                const fromInvIndex = cleanDescription.indexOf('(from Inv:');
                if (fromInvIndex > -1) {
                    cleanDescription = cleanDescription.substring(0, fromInvIndex).trim();
                }

                if (descriptionInput) descriptionInput.value = cleanDescription || '';

                // Focus on first input
                if (widthInput) {
                    widthInput.focus();
                }
            }, 100);

            // Add cancel button event listener
            const cancelBtn = form.querySelector('.cancel-skid-btn');
            if (cancelBtn) {
                cancelBtn.addEventListener('click', function (e) {
                    e.preventDefault();
                    formContainer.style.display = 'none';
                    formContainer.innerHTML = '';
                });
            }
        } else {
            console.error(`Could not find skid row for skid ID ${skidId}`);
            alert('Error: Could not find skid data. Please try refreshing the page.');
        }
    }

    // Calculate total weight and update display
    function updateTotalWeightFromTable() {
        const rows = document.querySelectorAll('#truckSkidTableBody tr');
        let totalWeight = 0;
        let skidCount = 0;
        
        console.log(`Found ${rows.length} skid rows in table`);
        
        rows.forEach(row => {
            const cells = row.querySelectorAll('td');
            // Make sure this is a valid skid row and not an "empty" message row
            if (cells.length >= 4 && cells[3]) {
                const weightText = cells[3].textContent;
                const weight = parseFloat(weightText);
                if (!isNaN(weight)) {
                    totalWeight += weight;
                    skidCount++;
                    console.log(`Added skid: weight=${weight}, running total=${totalWeight}, count=${skidCount}`);
                }
            }
        });
        
        const totalWeightElement = document.getElementById('totalTruckSkidWeight');
        const totalSkidsElement = document.getElementById('totalTruckSkidCount');
        const summaryWeightElement = document.getElementById('summaryWeight');
        const summarySkidCountElement = document.getElementById('summarySkidCount');
        
        if (totalWeightElement) {
            totalWeightElement.textContent = totalWeight.toFixed(2) + ' lbs';
            console.log(`Updated total weight display to ${totalWeight.toFixed(2)} lbs`);
        }
        
        if (totalSkidsElement) {
            totalSkidsElement.textContent = skidCount;
            console.log(`Updated skid count display to ${skidCount}`);
        }
        
        // Also update the summary elements
        if (summaryWeightElement) {
            summaryWeightElement.textContent = totalWeight.toFixed(2);
        }
        
        if (summarySkidCountElement) {
            summarySkidCountElement.textContent = skidCount;
        }
    }
    
    // Update inventory selection after deletion
    function updateAfterSkidDeletion(deletedOriginalInvId) {
        if (!deletedOriginalInvId) return;
        
        console.log(`Skid with original inventory ID ${deletedOriginalInvId} was deleted`);
        
        // Find the checkbox for this inventory ID and re-enable it
        const checkbox = document.querySelector(`input[value="${deletedOriginalInvId}"]`);
        if (checkbox) {
            checkbox.disabled = false;
            
            // Remove visual indication
            const row = checkbox.closest('tr');
            if (row) {
                row.classList.remove('already-on-truck');
                
                // Remove "(Already on truck)" from the description
                const descCell = row.querySelector('td:nth-child(6)');
                if (descCell) {
                    descCell.innerHTML = descCell.innerHTML.replace(/<span class="already-added-note">\(Already on truck\)<\/span>/, '');
                }
                
                // Update the label
                const label = row.querySelector('label');
                if (label) {
                    label.title = `Select ${deletedOriginalInvId}`;
                    label.classList.remove('disabled-label');
                }
            }
            
            console.log(`Re-enabled checkbox for inventory ID ${deletedOriginalInvId}`);
            
            // Make sure the Add Selected button is enabled
            const addSelectedBtn = document.getElementById('addSelectedSkidsBtn');
            if (addSelectedBtn) {
                addSelectedBtn.disabled = false;
            }
        }
    }
    
    // Function to re-check and update disabled checkboxes after any operation
    function refreshSkidSelectionStatus() {
        // Call our main function to check and disable already-on-truck skids
        disableInventorySkidsAlreadyOnTruck();
    }
</script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log("DOM Content Loaded - Setting up skid form");

        // Add Skid Directly to Truck button
        const addTruckSkidBtn = document.getElementById('addTruckSkidBtn');
        const formContainer = document.getElementById('addTruckSkidFormContainer');

        if (addTruckSkidBtn && formContainer) {
            addTruckSkidBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                console.log("Add skid button clicked");

                // Toggle the form visibility
                if (formContainer.style.display === 'none' || formContainer.style.display === '') {
                    showAddSkidForm();
                } else {
                    hideAddSkidForm();
                }
            });
        } else {
            console.error("Add skid button or form container not found!");
        }

        function showAddSkidForm() {
            try {
                const template = document.getElementById('skidFormTemplate');
                if (!template) {
                    console.error("Skid form template not found!");
                    alert("Error: Form template not found. Please refresh the page.");
                    return;
                }

                // Clone the template content
                const content = template.content.cloneNode(true);

                // Clear and add content to container
                formContainer.innerHTML = '';
                formContainer.appendChild(content);

                // Set up the form
                const form = formContainer.querySelector('.add-skid-form');
                if (!form) {
                e.preventDefault();
                e.stopPropagation();
                console.log("Add skid button clicked");

                // Toggle the form visibility
                if (formContainer.style.display === 'none' || formContainer.style.display === '') {
                    showAddSkidForm();
                } else {
                    hideAddSkidForm();
                }
            });
        } else {
            console.error("Add skid button or form container not found!");
        }

        function showAddSkidForm() {
            try {
                const template = document.getElementById('skidFormTemplate');
                if (!template) {
                    console.error("Skid form template not found!");
                    alert("Error: Form template not found. Please refresh the page.");
                    return;
                }

                // Clone the template content
                const content = template.content.cloneNode(true);

                // Clear and add content to container
                formContainer.innerHTML = '';
                formContainer.appendChild(content);

                // Set up the form
                const form = formContainer.querySelector('.add-skid-form');
                if (!form) {
                    console.error("Form not found in template!");
                    return;
                }

                // Set form attributes
                form.action = '/loader/truck/<%= project.code %>/skid';
                form.method = 'POST';

                // Add hidden loadId input if not present
                let loadIdInput = form.querySelector('input[name="loadId"]');
                if (!loadIdInput) {
                    loadIdInput = document.createElement('input');
                    loadIdInput.type = 'hidden';
                    loadIdInput.name = 'loadId';
                    loadIdInput.value = '<%= load._id %>';
                    form.appendChild(loadIdInput);
                }

                // Set up cancel button
                const cancelBtn = form.querySelector('.cancel-skid-btn');
                if (cancelBtn) {
                    cancelBtn.addEventListener('click', function(e) {
                        e.preventDefault();
                        hideAddSkidForm();
                    });
                }

                // Set up form submission
                form.addEventListener('submit', function(e) {
                    // Validate form
                    const widthInput = form.querySelector('input[name="width"]');
                    const lengthInput = form.querySelector('input[name="length"]');
                    const weightInput = form.querySelector('input[name="weight"]');

                    if (!widthInput.value || !lengthInput.value || !weightInput.value) {
                        e.preventDefault();
                        alert('Please fill in all required fields: width, length, and weight.');
                        return;
                    }

                    // Additional validation
                    if (parseFloat(widthInput.value) <= 0 || parseFloat(lengthInput.value) <= 0 || parseFloat(weightInput.value) <= 0) {
                        e.preventDefault();
                        alert('Width, length, and weight must be greater than 0.');
                        return;
                    }

                    // Show loading state
                    const submitBtn = form.querySelector('button[type="submit"]');
                    if (submitBtn) {
                        submitBtn.disabled = true;
                        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
                    }
                });

                // Show the form
                formContainer.style.display = 'block';

                // Focus on first input
                setTimeout(() => {
                    const firstInput = form.querySelector('input[name="width"]');
                    if (firstInput) {
                        firstInput.focus();
                    }
                }, 100);

            } catch (error) {
                console.error("Error showing add skid form:", error);
                alert("Error displaying form. Please refresh the page.");
            }
        }

        function hideAddSkidForm() {
            formContainer.style.display = 'none';
            formContainer.innerHTML = '';
        }
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        console.log("Setting up inventory skid selection");

        // Fix the form submission for adding inventory skids
        const inventoryForm = document.getElementById('inventorySkidForm');
        const addSelectedBtn = document.getElementById('addSelectedSkidsBtn');

        if (inventoryForm && addSelectedBtn) {
            // Remove any existing event listeners
            addSelectedBtn.removeEventListener('click', handleAddSelectedSkids);

            // Add new event listener
            addSelectedBtn.addEventListener('click', handleAddSelectedSkids);
        }

        function handleAddSelectedSkids(e) {
            e.preventDefault();

            // Get all checked checkboxes
            const checkedBoxes = inventoryForm.querySelectorAll('input[name="selectedSkids"]:checked:not(:disabled)');

            console.log(`Found ${checkedBoxes.length} selected skids`);

            if (checkedBoxes.length === 0) {
                alert('Please select at least one skid to add to the truck.');
                return;
            }

            // Debug: Log what we're submitting
            console.log('Submitting skids:', Array.from(checkedBoxes).map(cb => cb.value));

            // Create a proper form data object
            const formData = new FormData();
            formData.append('loadId', '<%= load._id %>');

            // Add each selected skid
            checkedBoxes.forEach(checkbox => {
                formData.append('selectedSkids', checkbox.value);
            });

            // Show loading state
            addSelectedBtn.disabled = true;
            addSelectedBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding Skids...';

            // Submit using fetch to have better control
            fetch(inventoryForm.action, {
                method: 'POST',
                body: formData,
                credentials: 'same-origin'
            })
                .then(response => {
                    if (response.ok) {
                        // If successful, reload the page to show updated state
                        window.location.reload();
                    } else {
                        throw new Error('Failed to add skids');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error adding skids. Please try again.');
                    // Reset button state
                    addSelectedBtn.disabled = false;
                    addSelectedBtn.innerHTML = '<i class="fas fa-plus"></i> Add Selected Skids to Truck';
                });
        }

        // Alternative: If fetch doesn't work, use traditional form submission
        function alternativeSubmit() {
            // Ensure the form has the correct action and method
            inventoryForm.action = '/loader/truck/<%= project.code %>/skids/add-from-inventory';
            inventoryForm.method = 'POST';

            // Add loadId if not present
            let loadIdInput = inventoryForm.querySelector('input[name="loadId"]');
            if (!loadIdInput) {
                loadIdInput = document.createElement('input');
                loadIdInput.type = 'hidden';
                loadIdInput.name = 'loadId';
                loadIdInput.value = '<%= load._id %>';
                inventoryForm.appendChild(loadIdInput);
            }

            // Submit the form
            inventoryForm.submit();
        }

        // Add checkbox change listeners to provide immediate feedback
        const checkboxes = document.querySelectorAll('.inventory-skid-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function () {
                const row = this.closest('tr');
                if (this.checked) {
                    row.classList.add('selected-for-add');
                    row.style.backgroundColor = '#e8f4ff';
                } else {
                    row.classList.remove('selected-for-add');
                    row.style.backgroundColor = '';
                }

                // Update button state
                const anyChecked = document.querySelectorAll('.inventory-skid-checkbox:checked:not(:disabled)').length > 0;
                addSelectedBtn.disabled = !anyChecked;
            });
        });

        // Initialize button state
        const anyChecked = document.querySelectorAll('.inventory-skid-checkbox:checked:not(:disabled)').length > 0;
        addSelectedBtn.disabled = !anyChecked;
    });
</script>


<script>
    // Fixed inventory skid selection JavaScript
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Setting up inventory skid selection');
        
        const form = document.getElementById('inventorySkidForm');
        const submitBtn = document.getElementById('addSelectedSkidsBtn');
        
        if (!form || !submitBtn) {
            console.error('Inventory form or submit button not found');
            return;
        }
        
        // Remove any existing event listeners
        const newForm = form.cloneNode(true);
        form.parentNode.replaceChild(newForm, form);
        
        // Get fresh references
        const inventoryForm = document.getElementById('inventorySkidForm');
        const addBtn = document.getElementById('addSelectedSkidsBtn');
        
        // Handle form submission
        inventoryForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const checkedBoxes = inventoryForm.querySelectorAll('input[name="selectedSkids"]:checked');
            
            if (checkedBoxes.length === 0) {
                alert('Please select at least one skid to add to the truck.');
                return;
            }
            
            // Show loading state
            addBtn.disabled = true;
            addBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
            
            // Submit the form
            this.submit();
        });
        
        // Visual feedback for checkboxes
        const checkboxes = inventoryForm.querySelectorAll('.inventory-skid-checkbox');
        
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const row = this.closest('tr');
                if (this.checked) {
                    row.classList.add('selected-for-add');
                } else {
                    row.classList.remove('selected-for-add');
                }
                
                // Update button state
                const checkedCount = inventoryForm.querySelectorAll('input[name="selectedSkids"]:checked').length;
                addBtn.disabled = checkedCount === 0;
            });
        });
        
        // Initial button state
        const initialCheckedCount = inventoryForm.querySelectorAll('input[name="selectedSkids"]:checked').length;
        addBtn.disabled = initialCheckedCount === 0;
    });
</script>

<style>
    tr.already-on-truck {
        background-color: #f8f9fa !important;
        opacity: 0.7;
    }

    tr.already-on-truck td {
        text-decoration: line-through;
    }

    .already-added-note {
        color: #dc3545;
        font-style: italic;
        font-size: 0.9em;
        margin-left: 5px;
    }

    tr.selected-for-add {
        background-color: #e7f3ff !important;
    }

    .disabled-label {
        color: #6c757d;
        cursor: not-allowed;
    }
</style>
<!-- Updated Script -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const addProjectBtn = document.getElementById('addAnotherProjectBtn');
    const projectSection = document.getElementById('additionalProjectsSection');
    const cancelBtn = document.getElementById('cancelAddProject');
    const projectSelect = document.getElementById('additionalProject');
    
    // Show project selection
    addProjectBtn.addEventListener('click', function() {
        projectSection.style.display = 'block';
        loadAvailableProjects();
    });
    
    // Cancel project selection
    cancelBtn.addEventListener('click', function() {
        projectSection.style.display = 'none';
        projectSelect.innerHTML = '<option value="">-- Select a Project --</option>';
    });
    
    // Load available projects via AJAX
    function loadAvailableProjects() {
        // Get all projects that haven't been added yet
        const currentProjectCode = '<%= project.code %>';
        const displayProjectCode = '<%= displayProject ? displayProject.code : project.code %>';
        
        // Track already loaded projects
        const loadedProjects = [currentProjectCode];
        <% if (additionalProjects && additionalProjects.length > 0) { %>
            <% additionalProjects.forEach(proj => { %>
                loadedProjects.push('<%= proj.code %>');
            <% }); %>
        <% } %>
        
        fetch('/loader/api/available-projects')
            .then(response => response.json())
            .then(data => {
                projectSelect.innerHTML = '<option value="">-- Select a Project --</option>';
                data.projects.forEach(proj => {
                    // Only show projects that haven't been loaded yet
                    if (!loadedProjects.includes(proj.code)) {
                        const option = document.createElement('option');
                        option.value = proj.code;
                        option.textContent = `${proj.name} (${proj.code})`;
                        projectSelect.appendChild(option);
                    }
                });
                
                if (projectSelect.options.length === 1) {
                    projectSelect.innerHTML = '<option value="">No additional projects available</option>';
                }
            })
            .catch(error => {
                console.error('Error loading projects:', error);
                alert('Error loading projects. Please try again.');
            });
    }
});
</script>
