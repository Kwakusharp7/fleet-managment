<!-- Action Buttons -->
    <div class="d-flex justify-content-between align-items-center mb-3 mt-3 no-print">
        <div>
            <form action="/loader/truck/<%= project.code %>/skids/clear" method="POST" style="display:inline;">
                <input type="hidden" name="_method" value="DELETE">
                <input type="hidden" name="loadId" value="<%= load._id %>">
                <button type="submit" id="resetSkidsBtn" class="btn btn-secondary"
                        <%= load.skids.length === 0 ? 'disabled' : '' %>>
                    <i class="fas fa-undo"></i> Reset Truck Skids List
                </button>
            </form>
        </div>
        <a href="/loader/truck/<%= project.code %>/print?loadId=<%= load._id %>" class="btn btn-print" target="_blank">
            <i class="fas fa-print"></i> Print Loading Plan
        </a>
    </div><!-- ==== Skid Details Page ==== -->
<div id="skidDetailsPage" class="page active">
    <h2 class="section-title">
        <i class="fas fa-pallet"></i> Skids for Truck:
        <span id="truckIdentifier"><%= load.truckId %></span>
        (<span id="skidDetailsProjectName"><%= project.name %></span>)
    </h2>

    <p class="intro-paragraph">
        Add skids directly, select from inventory for this project, or edit/remove skids for this load.
        <% if (load.truckInfo && load.truckInfo.length && load.truckInfo.width && load.truckInfo.weight) { %>
            <span id="truckSizeDisplay">
                (<%= load.truckInfo.length %>ft L Ã— <%= load.truckInfo.width %>ft W, <%= load.truckInfo.weight %>lbs Cap.)
            </span>
        <% } %>
    </p>

    <!-- Inventory Skid Selection -->
    <% if (inventorySkids && inventorySkids.length > 0) { %>
        <!-- Improved Inventory Skid Selection Table with better visual indicators -->
        <div id="inventorySkidSelectionContainer">
            <h4><i class="fas fa-clipboard-check"></i> Select Inventory Skids to Add to Truck</h4>
            
            <div class="alert alert-info" role="alert">
                <i class="fas fa-info-circle"></i> Once a skid is added to the truck, it cannot be selected again. 
                Skids that are already on the truck are marked as "Already Added" below.
            </div>
            
            <!-- Hidden fields for loadId and projectId -->
            <input type="hidden" id="loadId" value="<%= load._id %>">
            <input type="hidden" id="projectId" value="<%= project.code %>">

            <!-- Inventory Skid Selection Form -->
            <form action="/loader/truck/<%= project.code %>/skids/add-from-inventory" method="POST" id="inventorySkidForm">
                <input type="hidden" name="loadId" value="<%= load._id %>">

                <div class="table-responsive">
                    <table id="inventorySkidSelectionTable" class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th width="5%">Add</th>
                                <th width="15%">Inv. ID</th>
                                <th width="10%">Width (ft)</th>
                                <th width="10%">Length (ft)</th>
                                <th width="10%">Weight (lbs)</th>
                                <th width="50%">Description</th>
                            </tr>
                        </thead>
                        <tbody id="inventorySkidSelectionBody">
                        <% if (inventorySkids && inventorySkids.length > 0) { %>
                            <% inventorySkids.forEach(skid => { %>
                                <tr class="<%= skid.alreadyOnTruck ? 'already-on-truck' : '' %>" data-skid-id="<%= skid.id %>">
                                    <td>
                                        <input type="checkbox"
                                               name="selectedSkids"
                                               value="<%= skid.id %>"
                                               id="inv-select-<%= skid.id %>"
                                               class="inventory-skid-checkbox"
                                               <%= skid.alreadyOnTruck ? 'disabled checked' : '' %>>
                                    </td>
                                    <td>
                                        <label for="inv-select-<%= skid.id %>"
                                               class="<%= skid.alreadyOnTruck ? 'disabled-label' : '' %>"
                                               title="<%= skid.alreadyOnTruck ? 'Already added to truck' : `Select ${skid.id}` %>">
                                            <%= skid.id %>
                                        </label>
                                    </td>
                                    <td><%= skid.width.toFixed(2) %></td>
                                    <td><%= skid.length.toFixed(2) %></td>
                                    <td><%= skid.weight.toFixed(2) %></td>
                                    <td>
                                        <%= skid.description || '-' %>
                                        <% if (skid.alreadyOnTruck) { %>
                                            <span class="already-added-note">(Already on truck)</span>
                                        <% } %>
                                    </td>
                                </tr>
                            <% }); %>
                        <% } else { %>
                            <tr>
                                <td colspan="6" style="text-align: center;">No inventory skids available.</td>
                            </tr>
                        <% } %>
                        </tbody>
                    </table>
                </div>
                
                <button type="submit" class="btn btn-primary mt-3" id="addSelectedSkidsBtn">
                    <i class="fas fa-plus"></i> Add Selected Skids to Truck
                </button>
            </form>
        </div>
    <% } %>

    <!-- Ensure we have an explicit form container for adding skids directly -->
    <div class="mt-3 mb-4">
        <button class="btn btn-success" id="addTruckSkidBtn">
            <i class="fas fa-plus"></i> Add Skid Directly to Truck
        </button>
        
        <!-- Container for the form that will be added dynamically -->
        <div id="addTruckSkidFormContainer" style="display: none; margin-top: 15px; padding: 15px; border: 1px solid #ddd; border-radius: 5px; background-color: #f9f9f9;"></div>
    </div>

    <!-- Truck Skid Table -->
    <h3 class="section-title" style="font-size: 1.2rem; margin-top: 30px; border-bottom: none;">
        <i class="fas fa-truck-loading"></i> Skids Assigned to this Truck Load
    </h3>
    <div class="table-responsive">
        <table id="truckSkidTable">
            <thead>
            <tr>
                <th>Truck Skid #</th>
                <th>Width (ft)</th>
                <th>Length (ft)</th>
                <th>Weight (lbs)</th>
                <th>Description</th>
                <th class="no-print">Actions</th>
            </tr>
            </thead>
            <tbody id="truckSkidTableBody">
            <% if (load.skids && load.skids.length > 0) { %>
                <% load.skids.forEach((skid, index) => { %>
                    <tr data-skid-id="<%= skid.id %>" data-index="<%= index %>">
                        <td><%= index + 1 %></td>
                        <td><%= skid.width.toFixed(2) %></td>
                        <td><%= skid.length.toFixed(2) %></td>
                        <td class="skid-weight-cell"><%= skid.weight.toFixed(2) %></td>
                        <td>
                            <%= skid.description || '-' %>
                            <% if (skid.originalInvId) { %>
                                <span style="font-size: 0.8em; color: var(--text-muted); white-space: nowrap;">
                                        (from Inv: <%= skid.originalInvId %>)
                                    </span>
                            <% } %>
                        </td>
                        <td class="action-buttons no-print">
                            <button class="btn-edit btn-sm edit-skid-btn" data-skid-id="<%= skid.id %>" data-index="<%= index %>">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <!-- Use our new direct POST route for deletion -->
                            <form action="/loader/truck/<%= project.code %>/skids/delete-skid" method="POST" class="delete-skid-form">
                                <input type="hidden" name="skidId" value="<%= skid.id %>">
                                <input type="hidden" name="loadId" value="<%= load._id %>">
                                <button type="submit" class="btn-delete btn-sm delete-skid-btn">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </form>
                        </td>
                    </tr>
                <% }); %>
            <% } else { %>
                <tr>
                    <td colspan="6" style="text-align: center;">No skids added to this truck yet.</td>
                </tr>
            <% } %>
            </tbody>
            <tfoot>
            <tr style="font-weight: bold; background-color: var(--light-gray);">
                <td colspan="3">Truck Totals: <span id="totalTruckSkidCount"><%= load.skids.length || 0 %></span> Skids</td>
                <td id="totalTruckSkidWeight"><%= load.totalWeight?.toFixed(2) || '0.00' %> lbs</td>
                <td colspan="2"></td>
            </tr>
            </tfoot>
        </table>
    </div>

    <!-- Loading Instructions -->
    <div class="loading-instructions no-print">
        <div id="loadingInstructions">
            <h5><i class="fas fa-info-circle"></i> Loading Summary & Instructions</h5>
            <p><strong>Summary for Truck <%= load.truckId %>:</strong></p>
            <ul>
                <li>Total Skids on Truck: <span id="summarySkidCount"><%= load.skids.length || 0 %></span></li>
                <li>Total Weight on Truck: <span id="summaryWeight"><%= load.totalWeight?.toFixed(2) || '0.00' %></span> lbs
                    (<%= load.truckInfo.weight ? ((load.totalWeight || 0) / load.truckInfo.weight * 100).toFixed(1) : 0 %>%
                    of <%= load.truckInfo.weight %> lbs capacity)</li>
                <li>Approx. Area Used: <%= spaceUtilization.totalArea.toFixed(2) %> sq ft
                    (<%= spaceUtilization.percentage.toFixed(1) %>% of <%= spaceUtilization.truckArea.toFixed(2) %> sq ft available)</li>
            </ul>

            <% if (isOverweight) { %>
                <p class="warning"><i class="fas fa-exclamation-triangle"></i> Warning: Total weight exceeds truck capacity!</p>
            <% } else if (load.truckInfo.weight && (load.totalWeight || 0) > load.truckInfo.weight * 0.95) { %>
                <p class="warning" style="background-color:#fff3cd;border-color:#ffeeba;color:#856404;">
                    <i class="fas fa-exclamation-circle"></i> Caution: Approaching maximum weight capacity.
                </p>
            <% } %>

            <% if (spaceUtilization.percentage > 100) { %>
                <p class="warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    Warning: Total skid area exceeds theoretical truck floor space. Check stacking/dimensions.
                </p>
            <% } else if (spaceUtilization.percentage > 95 && spaceUtilization.percentage <= 100) { %>
                <p class="warning" style="background-color:#fff3cd;border-color:#ffeeba;color:#856404;">
                    <i class="fas fa-exclamation-circle"></i>
                    Caution: High space utilization. Consider loading arrangement.
                </p>
            <% } %>
        </div>
    </div>

    <!-- Navigation Buttons -->
    <div class="button-group no-print" style="margin-top: 30px;">
        <!-- Back all the way to Task Selection -->
        <a href="/loader" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Back to Task Selection
        </a>

        <!-- Next â†’ Truck Information Entry -->
        <a
          href="/loader/truck/<%= project.code %>/info?loadId=<%= load._id %>"
          class="btn btn-success btn-next"
        >
            <i class="fas fa-truck"></i> Next: Truck Information Entry
        </a>
    </div>
</div>

<!-- Skid Form Template -->
<template id="skidFormTemplate">
    <h4 class="skid-form-title-dynamic no-print">Add New Skid</h4>
    <form class="add-skid-form" novalidate>
        <input type="hidden" class="edit-skid-index">
        <input type="hidden" name="loadId" value="<%= load._id %>">
        <div class="row">
            <div class="col-md-3">
                <div class="form-group">
                    <label class="form-label required">Width <span class="unit-label">(ft)</span></label>
                    <div class="input-group">
                        <input type="number" name="width" class="form-control skid-width" min="0.1" max="40" step="0.01" required placeholder="e.g., 4">
                        <span class="input-group-text">ft</span>
                    </div>
                    <div class="invalid-feedback">Please enter a valid width (0.1-40).</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="form-label required">Length <span class="unit-label">(ft)</span></label>
                    <div class="input-group">
                        <input type="number" name="length" class="form-control skid-length" min="0.1" max="40" step="0.01" required placeholder="e.g., 4">
                        <span class="input-group-text">ft</span>
                    </div>
                    <div class="invalid-feedback">Please enter a valid length (0.1-40).</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="form-label required">Weight <span class="unit-label">(lbs)</span></label>
                    <div class="input-group">
                        <input type="number" name="weight" class="form-control skid-weight" min="1" required placeholder="e.g., 500">
                        <span class="input-group-text">lbs</span>
                    </div>
                    <div class="invalid-feedback">Please enter a valid weight (min 1).</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="form-label">Description</label>
                    <textarea name="description" class="form-control skid-description" placeholder="Type description here..." rows="3"></textarea>
                </div>
            </div>
        </div>
        <div class="button-group">
            <button type="button" class="btn btn-secondary cancel-skid-btn">
                <i class="fas fa-times"></i> Cancel
            </button>
            <button type="submit" class="btn btn-primary save-skid-btn">
                <i class="fas fa-plus"></i> Add Skid
            </button>
        </div>
    </form>
</template>

<%- contentFor('styles') %>
<style>
      tr.already-on-truck {
    background-color: #f8f9fa !important;
    color: #6c757d;
  }
  
  tr.already-on-truck td {
    text-decoration: line-through;
    opacity: 0.7;
  }
  
  .already-on-truck-label {
    color: #dc3545;
    font-style: italic;
    font-size: 0.85em;
    margin-left: 5px;
  }
  
  /* Make disabled checkboxes more obvious */
  input[type="checkbox"]:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  tr.already-on-truck label {
    cursor: not-allowed;
  }
    .input-group {
        display: flex;
        align-items: stretch;
    }

    .input-group .form-control {
        flex: 1;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    .input-group-text {
        display: flex;
        align-items: center;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: var(--dark-gray);
        text-align: center;
        white-space: nowrap;
        background-color: var(--medium-gray);
        border: 1px solid #ced4da;
        border-left: 0;
        border-radius: 0 var(--border-radius) var(--border-radius) 0;
    }

    /* Mobile adjustments */
    @media (max-width: 768px) {
        .row {
            flex-direction: column;
        }

        .col-md-3 {
            width: 100%;
        }
    }
    
    /* Readonly field styling */
    input[readonly] {
        background-color: #f8f9fa;
        cursor: default;
    }
    
    /* Style for already selected skids */
    tr.already-selected, tr.selected-skid {
        background-color: #f0f0f0;
        color: #777;
    }

    tr.already-selected td, tr.selected-skid td {
        text-decoration: line-through;
    }

    tr.already-selected::after, tr.selected-skid::after {
        content: "(Already Added)";
        position: absolute;
        right: 20px;
        color: #666;
        font-style: italic;
    }
    /* Add these to your styles section */
tr.already-selected td {
    opacity: 0.6;
    color: #777;
    text-decoration: line-through;
}

tr.already-selected input[type="checkbox"] {
    pointer-events: none;
}

.already-added-note {
    font-style: italic;
    color: #d9534f;
    font-size: 0.8em;
    margin-left: 5px;
}

/* Add a disabled appearance to checkboxes */
input[type="checkbox"]:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}
    /* Styles for skids already on the truck */
    tr.already-on-truck {
        background-color: #f8f9fa !important;
        color: #6c757d;
    }
    
    tr.already-on-truck td {
        text-decoration: line-through;
        opacity: 0.7;
    }
    
    .already-added-note {
        color: #dc3545;
        font-style: italic;
        font-size: 0.85em;
        margin-left: 5px;
    }
    
    /* Highlight skids selected for adding to the truck */
    tr.selected-for-add {
        background-color: #e8f4ff !important;
        font-weight: bold;
    }
    
    /* Make disabled checkboxes more obvious */
    input[type="checkbox"]:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    
    .disabled-label {
        color: #6c757d;
        cursor: not-allowed;
    }
    
    /* Add hover effect for rows */
    tr:hover {
        background-color: #f1f1f1;
    }
    
    /* Add focus effect for checkboxes */
    input[type="checkbox"]:focus {
        outline: 2px solid #007bff;
        outline-offset: 2px;
    }
    
    /* Style for table headers */
    th {
        background-color: #f8f9fa;
        font-weight: bold;
        text-align: center;
    }
    
    /* Style for table rows */
    tr {
        transition: background-color 0.2s ease-in-out;
    }
    
    /* Style for action buttons */
    .btn {
        transition: background-color 0.2s ease-in-out, color 0.2s ease-in-out;
    }
    
    .btn:hover {
        background-color: #0056b3;
        color: #ffffff;
    }
</style>

<%- contentFor('scripts') %>
<%- contentFor('scripts') %>
<script>
    // Initialize event listeners when document is ready
    document.addEventListener('DOMContentLoaded', function() {
        console.log("DOM Content Loaded");
        
        // Add event listeners for add skid button
        const addTruckSkidBtn = document.getElementById('addTruckSkidBtn');
        if (addTruckSkidBtn) {
            addTruckSkidBtn.addEventListener('click', function(e) {
                e.preventDefault(); // Prevent any default action
                console.log("Add skid button clicked");
                toggleAddSkidForm();
            });
            console.log("Add skid button listener attached");
        } else {
            console.error("Add skid button not found!");
        }

        // Set up event listeners for edit buttons
        document.querySelectorAll('.edit-skid-btn').forEach(button => {
            button.addEventListener('click', function() {
                console.log("Edit button clicked");
                const skidId = this.getAttribute('data-skid-id');
                const index = parseInt(this.getAttribute('data-index'), 10);
                editSkid(skidId, index);
            });
        });
        
        // Set up event listeners for delete form confirmation
        document.querySelectorAll('.delete-skid-form').forEach(form => {
            form.addEventListener('submit', function(e) {
                if (!confirm('Are you sure you want to remove this skid from the truck?')) {
                    e.preventDefault();
                }
            });
        });

        // Set up confirmation for the Reset Truck Skids List button
        document.getElementById('resetSkidsBtn')?.addEventListener('click', function(e) {
            if (!confirm('Are you sure you want to clear all skids from this truck load?')) {
                e.preventDefault();
            }
        });

        // Set up form validation for all forms
        document.addEventListener('submit', function(e) {
            if (e.target.classList.contains('add-skid-form')) {
                const form = e.target;
                if (!form.checkValidity()) {
                    e.preventDefault();
                    e.stopPropagation();

                    // Show validation messages
                    const inputs = form.querySelectorAll('[required]');
                    inputs.forEach(input => {
                        if (!input.validity.valid) {
                            input.classList.add('is-invalid');
                        } else {
                            input.classList.remove('is-invalid');
                        }
                    });

                    // Focus first invalid input
                    const firstInvalid = form.querySelector('.is-invalid');
                    if (firstInvalid) {
                        firstInvalid.focus();
                    }
                }
            }
        });
        
        // Track selected inventory skids and prevent duplicates
        const inventoryCheckboxes = document.querySelectorAll('.inventory-skid-checkbox');
        
        // Add event listeners to each checkbox
        inventoryCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                // If checked, disable this skid from being selected again
                if (this.checked) {
                    // Make the row appear as selected
                    this.closest('tr').classList.add('selected-skid');
                } else {
                    // Remove the selected appearance
                    this.closest('tr').classList.remove('selected-skid');
                }
            });
        });
        
        // FIX: Handle Add Selected Skids to Truck button click
        const addSelectedSkidsBtn = document.getElementById('addSelectedSkidsBtn');
        if (addSelectedSkidsBtn) {
            addSelectedSkidsBtn.addEventListener('click', function(e) {
                e.preventDefault();
                submitInventorySkids();
            });
        }
        
        // Calculate initial total weight - fixed version that uses visible table data
        updateTotalWeightFromTable();
        
        // IMPORTANT: Mark skids that are already on the truck as disabled
        disableInventorySkidsAlreadyOnTruck();
    });
    
    // Function to check and disable inventory items already on the truck
    function disableInventorySkidsAlreadyOnTruck() {
        console.log("Checking for inventory skids already on truck...");
        
        // Step 1: Get all inventory IDs from the truck table
        const skidsOnTruck = [];
        
        // Find all rows in the truck skids table
        const truckSkidRows = document.querySelectorAll('#truckSkidTableBody tr');
        
        // Extract information from each row
        truckSkidRows.forEach(row => {
            // Try to find the inventory ID in the description column (5th column)
            const descriptionCell = row.querySelector('td:nth-child(5)');
            if (descriptionCell) {
                // Look for text like "(from Inv: INV-XXXXX-X)" in the description
                const text = descriptionCell.innerHTML || '';
                const invMatch = text.match(/\(from Inv: ([^)]+)\)/);
                
                if (invMatch && invMatch[1]) {
                    // Found an inventory ID reference
                    skidsOnTruck.push(invMatch[1].trim());
                }
            }
            
            // Also check if there's any data attributes that might contain the original inventory ID
            const invIdAttr = row.getAttribute('data-original-inv-id');
            if (invIdAttr) {
                skidsOnTruck.push(invIdAttr);
            }
        });
        
        console.log("Skids already on truck:", skidsOnTruck);
        
        if (skidsOnTruck.length === 0) {
            console.log("No skids found on truck. No checkboxes to disable.");
            return;
        }
        
        // Step 2: Disable checkboxes for inventory items that are already on the truck
        let disabledCount = 0;
        const inventoryCheckboxes = document.querySelectorAll('.inventory-skid-checkbox');
        
        inventoryCheckboxes.forEach(checkbox => {
            const value = checkbox.value;
            if (skidsOnTruck.includes(value)) {
                // Disable the checkbox
                checkbox.disabled = true;
                checkbox.checked = false;
                disabledCount++;
                
                // Add visual indication to the row
                const row = checkbox.closest('tr');
                if (row) {
                    row.classList.add('already-on-truck');
                    
                    // Add "(Already on truck)" to the description if not already there
                    const descCell = row.querySelector('td:nth-child(6)');
                    if (descCell && !descCell.innerHTML.includes('Already on truck')) {
                        descCell.innerHTML += ' <span class="already-added-note">(Already on truck)</span>';
                    }
                    
                    // Update the label to show it's disabled
                    const label = row.querySelector('label');
                    if (label) {
                        label.title = "Already added to truck";
                        label.classList.add('disabled-label');
                    }
                }
            }
        });
        
        console.log(`Disabled ${disabledCount} checkboxes for skids already on truck.`);
        
        // Step 3: Check if the Add Selected button should be disabled (if all checkboxes are disabled)
        const addSelectedBtn = document.getElementById('addSelectedSkidsBtn');
        if (addSelectedBtn && disabledCount === inventoryCheckboxes.length) {
            addSelectedBtn.disabled = true;
            addSelectedBtn.title = "All inventory skids are already on the truck";
        }
    }

    // Function to mark skids already on the truck (alternative implementation)
    function markAlreadyAddedSkids() {
        disableInventorySkidsAlreadyOnTruck();
    }

    // FIX: Function to handle form submission using traditional POST
    function submitInventorySkids() {
        // Get form and form data
        const form = document.getElementById('inventorySkidForm');
        
        // Check if any skids are selected
        const selectedCheckboxes = form.querySelectorAll('input[name="selectedSkids"]:checked:not(:disabled)');
        if (selectedCheckboxes.length === 0) {
            alert('Please select at least one skid to add.');
            return;
        }
        
        console.log(`Submitting ${selectedCheckboxes.length} selected skids`);
        
        // Before submitting, disable the checked checkboxes to prevent multiple clicks
        selectedCheckboxes.forEach(checkbox => {
            checkbox.disabled = true;
            
            // Add visual indication to the row
            const row = checkbox.closest('tr');
            if (row) {
                row.classList.add('selected-for-add');
            }
        });
        
        // Submit the form directly (no AJAX)
        form.submit();
    }

    function toggleAddSkidForm() {
        const formContainer = document.getElementById('addTruckSkidFormContainer');
        if (formContainer.style.display === 'none') {
            // Show form
            const template = document.getElementById('skidFormTemplate');
            const content = template.content.cloneNode(true);
            formContainer.innerHTML = '';
            formContainer.appendChild(content);

            // Set up form submission
            const form = formContainer.querySelector('.add-skid-form');
            form.action = '/loader/truck/<%= project.code %>/skid';
            form.method = 'POST';

            // Add hidden input for loadId
            const loadIdInput = document.createElement('input');
            loadIdInput.type = 'hidden';
            loadIdInput.name = 'loadId';
            loadIdInput.value = '<%= load._id %>';
            form.appendChild(loadIdInput);

            // Add event listeners for automatic weight calculation
            const widthInput = form.querySelector('.skid-width');
            const lengthInput = form.querySelector('.skid-length');
            const weightInput = form.querySelector('.skid-weight');

            // We're not automatically calculating weight anymore
            // The user will input the weight manually
            
            // Add cancel button event listener
            form.querySelector('.cancel-skid-btn').addEventListener('click', function() {
                formContainer.style.display = 'none';
                formContainer.innerHTML = '';
            });

            formContainer.style.display = 'block';
            setTimeout(() => {
                formContainer.querySelector('.skid-width').focus();
            }, 100);
        } else {
            // Hide form
            formContainer.style.display = 'none';
            formContainer.innerHTML = '';
        }
    }

    // Edit Skid Function - CSP compatible version
    function editSkid(skidId, index) {
        console.log(`Editing skid ${skidId} at index ${index}`);
        const formContainer = document.getElementById('addTruckSkidFormContainer');
        const template = document.getElementById('skidFormTemplate');
        const content = template.content.cloneNode(true);
        formContainer.innerHTML = '';
        formContainer.appendChild(content);

        // Update title and button text
        const titleEl = formContainer.querySelector('.skid-form-title-dynamic');
        titleEl.innerHTML = '<i class="fas fa-edit"></i> Edit Skid #' + (index + 1);

        const saveBtn = formContainer.querySelector('.save-skid-btn');
        saveBtn.innerHTML = '<i class="fas fa-save"></i> Save Changes';

        // Find the row in the table with this skid's data
        const skidRow = document.querySelector(`tr[data-skid-id="${skidId}"]`);
        if (skidRow) {
            const cells = skidRow.querySelectorAll('td');
            const width = parseFloat(cells[1].textContent);
            const length = parseFloat(cells[2].textContent);
            const weight = parseFloat(cells[3].textContent);
            const description = cells[4].textContent.trim();
            
            console.log(`Found skid data in table: width=${width}, length=${length}, weight=${weight}, description=${description}`);
            
            const form = formContainer.querySelector('.add-skid-form');
            // Use the correct URL pattern for updating skids
            form.action = '/loader/truck/<%= project.code %>/skid/' + skidId;
            form.method = 'POST';

            // Add method override for PUT
            const methodInput = document.createElement('input');
            methodInput.type = 'hidden';
            methodInput.name = '_method';
            methodInput.value = 'PUT';
            form.appendChild(methodInput);

            // Add hidden input for loadId
            const loadIdInput = document.createElement('input');
            loadIdInput.type = 'hidden';
            loadIdInput.name = 'loadId';
            loadIdInput.value = '<%= load._id %>';
            form.appendChild(loadIdInput);

            // Fill form with skid data
            const widthInput = form.querySelector('.skid-width');
            const lengthInput = form.querySelector('.skid-length');
            const weightInput = form.querySelector('.skid-weight');
            const descriptionInput = form.querySelector('.skid-description');
            
            widthInput.value = width;
            lengthInput.value = length;
            weightInput.value = weight;
            
            // Clean up description (remove "from Inv" text if present)
            let cleanDescription = description;
            const fromInvIndex = cleanDescription.indexOf('(from Inv:');
            if (fromInvIndex > -1) {
                cleanDescription = cleanDescription.substring(0, fromInvIndex).trim();
            }
            
            descriptionInput.value = cleanDescription || '';
            
            // Add cancel button event listener
            form.querySelector('.cancel-skid-btn').addEventListener('click', function() {
                formContainer.style.display = 'none';
                formContainer.innerHTML = '';
            });
            
            formContainer.style.display = 'block';
            setTimeout(() => {
                formContainer.querySelector('.skid-width').focus();
            }, 100);
        } else {
            console.error(`Could not find skid row for skid ID ${skidId}`);
            alert('Error: Could not find skid data. Please try refreshing the page.');
        }
    }

    // Calculate total weight and update display
    function updateTotalWeightFromTable() {
        const rows = document.querySelectorAll('#truckSkidTableBody tr');
        let totalWeight = 0;
        let skidCount = 0;
        
        console.log(`Found ${rows.length} skid rows in table`);
        
        rows.forEach(row => {
            const cells = row.querySelectorAll('td');
            // Make sure this is a valid skid row and not an "empty" message row
            if (cells.length >= 4 && cells[3]) {
                const weightText = cells[3].textContent;
                const weight = parseFloat(weightText);
                if (!isNaN(weight)) {
                    totalWeight += weight;
                    skidCount++;
                    console.log(`Added skid: weight=${weight}, running total=${totalWeight}, count=${skidCount}`);
                }
            }
        });
        
        const totalWeightElement = document.getElementById('totalTruckSkidWeight');
        const totalSkidsElement = document.getElementById('totalTruckSkidCount');
        const summaryWeightElement = document.getElementById('summaryWeight');
        const summarySkidCountElement = document.getElementById('summarySkidCount');
        
        if (totalWeightElement) {
            totalWeightElement.textContent = totalWeight.toFixed(2) + ' lbs';
            console.log(`Updated total weight display to ${totalWeight.toFixed(2)} lbs`);
        }
        
        if (totalSkidsElement) {
            totalSkidsElement.textContent = skidCount;
            console.log(`Updated skid count display to ${skidCount}`);
        }
        
        // Also update the summary elements
        if (summaryWeightElement) {
            summaryWeightElement.textContent = totalWeight.toFixed(2);
        }
        
        if (summarySkidCountElement) {
            summarySkidCountElement.textContent = skidCount;
        }
    }
    
    // Update inventory selection after deletion
    function updateAfterSkidDeletion(deletedOriginalInvId) {
        if (!deletedOriginalInvId) return;
        
        console.log(`Skid with original inventory ID ${deletedOriginalInvId} was deleted`);
        
        // Find the checkbox for this inventory ID and re-enable it
        const checkbox = document.querySelector(`input[value="${deletedOriginalInvId}"]`);
        if (checkbox) {
            checkbox.disabled = false;
            
            // Remove visual indication
            const row = checkbox.closest('tr');
            if (row) {
                row.classList.remove('already-on-truck');
                
                // Remove "(Already on truck)" from the description
                const descCell = row.querySelector('td:nth-child(6)');
                if (descCell) {
                    descCell.innerHTML = descCell.innerHTML.replace(/<span class="already-added-note">\(Already on truck\)<\/span>/, '');
                }
                
                // Update the label
                const label = row.querySelector('label');
                if (label) {
                    label.title = `Select ${deletedOriginalInvId}`;
                    label.classList.remove('disabled-label');
                }
            }
            
            console.log(`Re-enabled checkbox for inventory ID ${deletedOriginalInvId}`);
            
            // Make sure the Add Selected button is enabled
            const addSelectedBtn = document.getElementById('addSelectedSkidsBtn');
            if (addSelectedBtn) {
                addSelectedBtn.disabled = false;
            }
        }
    }
    
    // Function to re-check and update disabled checkboxes after any operation
    function refreshSkidSelectionStatus() {
        // Call our main function to check and disable already-on-truck skids
        disableInventorySkidsAlreadyOnTruck();
    }
</script>
