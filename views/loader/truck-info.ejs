<!-- ==== Truck Information Entry ==== -->
<div id="truckInfoPage" class="page active">
    <h2 class="section-title">
        <i class="fas fa-truck"></i> Truck Information Entry
    </h2>

    <!-- Project display -->
    <div class="fixed-info" style="margin: 0 25px 15px;">
        <p><strong>Current Project:</strong> <%= project.code %> â€“ <%= project.name %></p>
    </div>

    <!-- Intro Paragraph -->
    <p class="intro-paragraph">Enter the truck details below to begin loading planning.</p>

    <!-- Truck Details Form -->
    <form id="truckInfoForm" action="/loader/truck/<%= project.code %>" method="POST" style="margin: 0 25px;">
        <% if (typeof existingLoad !== 'undefined' && existingLoad) { %>
            <!-- If there's an existing load, allow editing it -->
            <input type="hidden" name="loadId" value="<%= existingLoad._id %>">
            <div class="alert alert-info">
                <p>You are editing an existing planned load: <strong><%= existingLoad.truckId %></strong></p>
                <p>Created on: <%= new Date(existingLoad.dateEntered).toLocaleString() %></p>
            </div>
        <% } %>

        <% if (typeof load !== 'undefined' && load && load._id) { %>
          <!-- Editing an existing load -->
          <input type="hidden" name="loadId" value="<%= load._id %>">
          <div class="alert alert-info">
            <p>You are editing an existing planned load: <strong><%= load.truckId %></strong></p>
            <p>Created on: <%= load.dateEntered ? new Date(load.dateEntered).toLocaleString() : '' %></p>
          </div>
        <% } %>

        <div class="form-group input-icon">
            <label for="truckId">Truck Identification <span class="unit-label">(Required)</span></label>
            <input type="text" id="truckId" name="truckId" class="form-control"
                   placeholder="Enter truck ID or license plate"
                   value="<%= typeof load !== 'undefined' && load ? load.truckId : '' %>"
                   required>
            <i class="fas fa-tag"></i>
            <div class="invalid-feedback">Please enter the Truck Identification.</div>
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="form-group input-icon">
                    <label for="length">Length <span class="unit-label">(Feet, Required)</span></label>
                    <input type="number" id="length" name="length" class="form-control"
                           placeholder="e.g., 53" step="0.01" min="1"
                           value="<%= typeof load !== 'undefined' && load && load.truckInfo ? load.truckInfo.length : '' %>"
                           required>
                    <i class="fas fa-ruler-horizontal"></i>
                    <div class="invalid-feedback">Please enter a valid length (min 1).</div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group input-icon">
                    <label for="width">Width <span class="unit-label">(Feet, Required)</span></label>
                    <input type="number" id="width" name="width" class="form-control"
                           placeholder="e.g., 8.5" step="0.01" min="1"
                           value="<%= typeof load !== 'undefined' && load && load.truckInfo ? load.truckInfo.width : '' %>"
                           required>
                    <i class="fas fa-ruler-combined"></i>
                    <div class="invalid-feedback">Please enter a valid width (min 1).</div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group input-icon">
                    <label for="weight">Weight Capacity <span class="unit-label">(Pounds, Required)</span></label>
                    <input type="number" id="weight" name="weight" class="form-control"
                           placeholder="e.g., 45000" step="1" min="1000"
                           value="<%= typeof load !== 'undefined' && load && load.truckInfo ? load.truckInfo.weight : '' %>"
                           required>
                    <i class="fas fa-weight-hanging"></i>
                    <div class="invalid-feedback">Please enter a valid weight capacity (min 1000).</div>
                </div>
            </div>
        </div>

        <div class="button-group">
            <!-- Add "Back to Skids" button here as the first button -->
            <a href="/loader/truck/<%= project.code %>/skids?loadId=<%= typeof load !== 'undefined' && load ? load._id : (typeof existingLoad !== 'undefined' && existingLoad ? existingLoad._id : '') %>" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to Skids
            </a>
            
            <a href="/loader" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to Task Selection
            </a>
            
            <button type="button" class="btn btn-cancel" id="resetTruckInfoBtn">
                <i class="fas fa-undo"></i> Reset Fields
            </button>
            
            <button type="submit" class="btn btn-next" id="nextBtn">
                <i class="fas fa-arrow-right"></i> Next: Packing List
            </button>
        </div>
    </form>

    <!-- Professional Loading Summary -->
    <% if (typeof load !== 'undefined' && load && load.skids && load.skids.length > 0) { %>
        <% 
            // Calculate totals for the current load
            let totalSkids = load.skids ? load.skids.length : 0;
            
            // Calculate actual weight from skids
            let totalWeight = 0;
            let totalAreaUsed = 0;
            
            if (load.skids && load.skids.length > 0) {
                load.skids.forEach(skid => {
                    // Add weight from each skid
                    totalWeight += parseFloat(skid.weight) || 0;
                    
                    // Calculate area for each skid
                    const width = parseFloat(skid.width) || 0;
                    const length = parseFloat(skid.length) || 0;
                    totalAreaUsed += (width * length);
                });
            }
            
            let truckCapacity = load.truckInfo && load.truckInfo.weight ? load.truckInfo.weight : 0;
            let truckLength = load.truckInfo && load.truckInfo.length ? load.truckInfo.length : 0;
            let truckWidth = load.truckInfo && load.truckInfo.width ? load.truckInfo.width : 0;
            let truckArea = truckLength * truckWidth;
            
            // Calculate percentages
            let weightPercentage = truckCapacity > 0 ? ((totalWeight / truckCapacity) * 100).toFixed(1) : 0;
            let areaPercentage = truckArea > 0 ? ((totalAreaUsed / truckArea) * 100).toFixed(1) : 0;
        %>

        <div class="loading-summary-section">
            <h3 class="summary-header">
                <i class="fas fa-truck"></i> Loading Summary for Truck: <%= load.truckId %>
            </h3>
            
            <div class="summary-content">
                <div class="summary-row">
                    <div class="summary-item">
                        <i class="fas fa-pallet"></i>
                        <span class="summary-label">Total Skids on Truck:</span>
                        <span class="summary-value"><%= totalSkids %></span>
                    </div>
                    
                    <div class="summary-item">
                        <i class="fas fa-weight"></i>
                        <span class="summary-label">Total Weight on Truck:</span>
                        <span class="summary-value">
                            <%= totalWeight.toFixed(2) %> lbs
                            <span class="percentage">(<%= weightPercentage %>% of <%= truckCapacity.toLocaleString() %> lbs capacity)</span>
                        </span>
                    </div>
                    
                    <div class="summary-item">
                        <i class="fas fa-ruler-combined"></i>
                        <span class="summary-label">Approx. Area Used:</span>
                        <span class="summary-value">
                            <%= totalAreaUsed.toFixed(2) %> sq ft
                            <span class="percentage">(<%= areaPercentage %>% of <%= truckArea.toFixed(2) %> sq ft available)</span>
                        </span>
                    </div>
                </div>
                
                <!-- Progress Bars -->
                <div class="progress-section">
                    <div class="progress-container">
                        <label>Weight Utilization</label>
                        <div class="progress-bar">
                            <div class="progress-fill weight-progress" style="width: <%= weightPercentage %>%;">
                                <span class="progress-text"><%= weightPercentage %>%</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="progress-container">
                        <label>Space Utilization</label>
                        <div class="progress-bar">
                            <div class="progress-fill space-progress" style="width: <%= areaPercentage %>%;">
                                <span class="progress-text"><%= areaPercentage %>%</span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Warning Messages -->
                <% if (parseFloat(weightPercentage) > 95) { %>
                    <div class="warning-message high-weight">
                        <i class="fas fa-exclamation-triangle"></i>
                        <span>Warning: Load is approaching maximum weight capacity</span>
                    </div>
                <% } %>
                
                <% if (parseFloat(areaPercentage) > 95) { %>
                    <div class="warning-message high-space">
                        <i class="fas fa-exclamation-triangle"></i>
                        <span>Warning: Load is approaching maximum space capacity</span>
                    </div>
                <% } %>
            </div>
        </div>
    <% } %>
</div>

<%- contentFor('scripts') %>
<script>
    // Form validation
    document.getElementById('truckInfoForm').addEventListener('submit', function(e) {
        const form = this;
        const requiredInputs = form.querySelectorAll('[required]');
        let isValid = true;

        // Remove previous validation messages
        form.querySelectorAll('.is-invalid').forEach(el => {
            el.classList.remove('is-invalid');
        });

        // Check required fields
        requiredInputs.forEach(input => {
            if (!input.value.trim()) {
                input.classList.add('is-invalid');
                isValid = false;
            }
        });

        // Check length constraints
        const length = parseFloat(form.length.value);
        if (isNaN(length) || length < 1) {
            form.length.classList.add('is-invalid');
            isValid = false;
        }

        // Check width constraints
        const width = parseFloat(form.width.value);
        if (isNaN(width) || width < 1) {
            form.width.classList.add('is-invalid');
            isValid = false;
        }

        // Check weight constraints
        const weight = parseFloat(form.weight.value);
        if (isNaN(weight) || weight < 1000) {
            form.weight.classList.add('is-invalid');
            isValid = false;
        }

        if (!isValid) {
            e.preventDefault();
        }
    });

    // Reset button functionality
    document.getElementById('resetTruckInfoBtn').addEventListener('click', function() {
        if (confirm('Reset truck information fields? This will not affect any existing data.')) {
            const form = document.getElementById('truckInfoForm');

            // Keep the loadId if it exists
            const loadId = form.querySelector('input[name="loadId"]')?.value;

            // Reset the form
            form.reset();

            // Restore loadId if it existed
            if (loadId) {
                form.querySelector('input[name="loadId"]').value = loadId;
            }

            // Clear validation states
            form.querySelectorAll('.is-invalid').forEach(el => {
                el.classList.remove('is-invalid');
            });
        }
    });
</script>

<%- contentFor('styles') %>
<style>
    /* Common styling */
    .input-icon {
        position: relative;
    }
    
    .input-icon i {
        position: absolute;
        left: 10px;
        top: 38px; /* Position below label */
        color: var(--primary-color);
        opacity: 0.7;
    }
    
    .input-icon .form-control {
        padding-left: 35px; /* Space for icon */
    }
    
    /* Button styling */
    .button-group {
        display: flex;
        gap: 10px;
        margin-top: 30px;
        flex-wrap: wrap;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
        .button-group {
            flex-direction: column;
        }
        
        .button-group a, 
        .button-group button {
            width: 100%;
            margin-bottom: 8px;
        }
    }
    
    /* Alert styling */
    .alert-info {
        background-color: #e1f5fe;
        border-color: #b3e5fc;
        color: #0277bd;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 20px;
    }
    
    /* Form element styling */
    .form-group {
        margin-bottom: 20px;
    }
    
    .form-label {
        font-weight: 500;
        margin-bottom: 5px;
        display: block;
    }
    
    .unit-label {
        font-weight: normal;
        font-size: 0.85em;
        color: var(--text-muted);
    }
    
    /* Button styles */
    .btn-next {
        background-color: var(--success-color, #28a745);
        color: white;
    }
    
    .btn-cancel {
        background-color: #6c757d;
        color: white;
    }
    
    /* Professional Loading Summary Styles */
    .loading-summary-section {
        background-color: #f8f9fa;
        border: 2px solid #0066cc;
        border-radius: 8px;
        padding: 25px;
        margin: 30px 25px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .summary-header {
        color: #0066cc;
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 2px solid #e9ecef;
    }
    
    .summary-header i {
        margin-right: 10px;
    }
    
    .summary-content {
        padding: 10px 0;
    }
    
    .summary-row {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin-bottom: 25px;
    }
    
    .summary-item {
        display: flex;
        align-items: center;
        padding: 12px 15px;
        background-color: white;
        border-radius: 6px;
        border: 1px solid #e9ecef;
        transition: all 0.2s ease;
    }
    
    .summary-item:hover {
        box-shadow: 0 2px 6px rgba(0,0,0,0.08);
        transform: translateY(-1px);
    }
    
    .summary-item i {
        color: #0066cc;
        font-size: 20px;
        margin-right: 15px;
        width: 25px;
        text-align: center;
    }
    
    .summary-label {
        font-weight: 600;
        color: #495057;
        margin-right: 10px;
        flex: 1;
    }
    
    .summary-value {
        font-weight: bold;
        font-size: 18px;
        color: #333;
    }
    
    .percentage {
        font-size: 14px;
        color: #6c757d;
        font-weight: normal;
    }
    
    /* Progress Bars */
    .progress-section {
        margin-top: 25px;
    }
    
    .progress-container {
        margin-bottom: 20px;
    }
    
    .progress-container label {
        display: block;
        font-weight: 600;
        color: #495057;
        margin-bottom: 8px;
    }
    
    .progress-bar {
        background-color: #e9ecef;
        border-radius: 20px;
        height: 30px;
        overflow: hidden;
        position: relative;
    }
    
    .progress-fill {
        height: 100%;
        border-radius: 20px;
        transition: width 0.6s ease;
        position: relative;
        overflow: hidden;
    }
    
    .weight-progress {
        background: linear-gradient(90deg, #28a745 0%, #20c997 100%);
    }
    
    .space-progress {
        background: linear-gradient(90deg, #007bff 0%, #17a2b8 100%);
    }
    
    .progress-text {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        color: white;
        font-weight: bold;
        font-size: 14px;
    }
    
    /* Warning Messages */
    .warning-message {
        display: flex;
        align-items: center;
        padding: 12px 16px;
        border-radius: 6px;
        margin-top: 15px;
        font-weight: 600;
    }
    
    .warning-message i {
        margin-right: 10px;
        font-size: 18px;
    }
    
    .high-weight {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }
    
    .high-space {
        background-color: #fff3cd;
        color: #856404;
        border: 1px solid #ffeeba;
    }
    
    /* Responsive Design */
    @media (min-width: 768px) {
        .summary-row {
            flex-direction: row;
            justify-content: space-between;
            gap: 20px;
        }
        
        .summary-item {
            flex: 1;
        }
    }
    
    /* Animation for progress bars */
    @keyframes fillProgress {
        from {
            width: 0;
        }
    }
    
    .progress-fill {
        animation: fillProgress 1s ease-out;
    }
</style>